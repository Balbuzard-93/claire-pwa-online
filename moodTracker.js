// moodTracker.js (Version Corrig√©e v2 - V√©rification Date Stricte)
import { getMoodEntryForDate, saveMoodEntry, getCurrentDateString } from './storageUtils.js';

let currentSelection = { mood: null, energy: null, anxiety: null };
let todaysExistingEntry = null;
// let todayString = ''; // Ne pas garder en globale ici, obtenir √† chaque rendu/refresh

/** V√©rifie si pr√™t √† sauvegarder */
function checkIfReadyToSave(saveButton) {
    if (!saveButton) return;
    const isReady = currentSelection.mood !== null && currentSelection.energy !== null && currentSelection.anxiety !== null;
    saveButton.disabled = !!todaysExistingEntry || !isReady;
}

/** Met √† jour l'UI */
function updateUIAfterRecording(containerElement) {
    // ... (code identique √† la version pr√©c√©dente) ...
     const messageElement = containerElement.querySelector('#moodMessage');
     const saveButton = containerElement.querySelector('#saveMoodEntry');
     const selectionButtons = containerElement.querySelectorAll('.mood-selector button');
     if (!messageElement || !saveButton || !selectionButtons) { console.error("Mood LOG ERROR: √âl√©ments UI introuvables pour MAJ."); return; }
     const entryExists = !!todaysExistingEntry;
     messageElement.textContent = entryExists ? "Humeur enregistr√©e pour aujourd'hui. Revenez demain !" : '';
     messageElement.className = entryExists ? 'mood-message success' : 'mood-message';
     selectionButtons.forEach(button => { button.disabled = entryExists; const group = button.dataset.group; const value = button.dataset.value; let isSelected = false; if (entryExists && todaysExistingEntry[group] !== undefined && String(todaysExistingEntry[group]) === value) { isSelected = true; } else if (!entryExists && currentSelection[group] !== null && String(currentSelection[group]) === value) { isSelected = true; } button.classList.toggle('selected', isSelected); });
     if (entryExists) { currentSelection = { mood: todaysExistingEntry.mood, energy: todaysExistingEntry.energy, anxiety: todaysExistingEntry.anxiety }; }
     checkIfReadyToSave(saveButton);
}

/** Charge l'entr√©e du jour */
async function loadAndCheckMoodForToday(containerElement, dateStr) { // Re√ßoit date
    // console.log("Mood LOG: D√©but loadAndCheckMoodForToday pour", dateStr);
    if (!dateStr || typeof dateStr !== 'string' || !/^\d{4}-\d{2}-\d{2}$/.test(dateStr)) { // *** V√©rification Stricte de la Date ***
         console.error("Mood LOG ERROR: dateStr invalide re√ßue par loadAndCheckMoodForToday:", dateStr);
         todaysExistingEntry = null;
         updateUIAfterRecording(containerElement);
         return;
    }
    try {
        todaysExistingEntry = await getMoodEntryForDate(dateStr);
        // console.log("Mood LOG: Entr√©e r√©cup√©r√©e:", todaysExistingEntry);
    } catch (error) { console.error("Mood LOG ERROR: Erreur chargement humeur du jour:", error); todaysExistingEntry = null; }
    updateUIAfterRecording(containerElement);
    // console.log("Mood LOG: Fin loadAndCheckMoodForToday");
}

/** Sauvegarde l'humeur */
async function saveMood(containerElement, dateStr) { // Re√ßoit date
    // console.log("Mood LOG: D√©but saveMood pour", dateStr);
    const saveButton = containerElement.querySelector('#saveMoodEntry');
    if (!saveButton || saveButton.disabled) return;
    if(!dateStr){ console.error("Mood LOG ERROR: dateStr non d√©finie dans saveMood"); return; }

    try { /* ... (Re-v√©rification existence) ... */ } catch(error) { /* ... */ return; }
    if (currentSelection.mood === null || /*...*/) { alert("S√©lectionnez tout."); return; }
    const newEntry = { date: dateStr, mood: parseInt(currentSelection.mood), /*...*/ };
    try { /* ... (Sauvegarde) ... */ } catch (error) { /* ... */ }
}

/** Initialise l'interface */
export async function initMoodTracker(containerElement) {
    // console.log("Mood LOG: Initialisation...");
    if (!containerElement) { console.error("Mood LOG ERROR: Conteneur introuvable."); return; }

    // *** OBTENIR LA DATE ICI ***
    const todayStringForInit = getCurrentDateString();
    console.log("Mood LOG: Date pour init:", todayStringForInit); // Log pour v√©rifier

    // R√©initialiser √©tats locaux
    currentSelection = { mood: null, energy: null, anxiety: null };
    todaysExistingEntry = null;

    containerElement.innerHTML = `...`; // (Copier la structure HTML pr√©c√©dente ici)
         containerElement.innerHTML = `
         <h2>Comment vous sentez-vous aujourd'hui ?</h2>
         <p class="mood-instruction">S√©lectionnez une option pour chaque cat√©gorie (une seule fois par jour).</p>
         <div class="mood-question"> <label id="mood-label">Humeur :</label> <div class="mood-selector mood-buttons" role="group" aria-labelledby="mood-label"> <button data-group="mood" data-value="1" aria-label="Humeur Tr√®s basse">üôÅ</button> <button data-group="mood" data-value="2" aria-label="Humeur Basse">üòï</button> <button data-group="mood" data-value="3" aria-label="Humeur Moyenne">üòê</button> <button data-group="mood" data-value="4" aria-label="Humeur Bien">üôÇ</button> <button data-group="mood" data-value="5" aria-label="Humeur Tr√®s bien">üòÑ</button> </div> </div>
         <div class="mood-question"> <label id="energy-label">√ânergie :</label> <div class="mood-selector energy-buttons" role="group" aria-labelledby="energy-label"> <button data-group="energy" data-value="1">Faible</button> <button data-group="energy" data-value="2">Moyenne</button> <button data-group="energy" data-value="3">Haute</button> </div> </div>
         <div class="mood-question"> <label id="anxiety-label">Anxi√©t√© :</label> <div class="mood-selector anxiety-buttons" role="group" aria-labelledby="anxiety-label"> <button data-group="anxiety" data-value="1">Faible</button> <button data-group="anxiety" data-value="2">Moyenne</button> <button data-group="anxiety" data-value="3">Haute</button> </div> </div>
         <button id="saveMoodEntry" class="save-button button-primary" disabled>Enregistrer l'humeur du jour</button>
         <p id="moodMessage" class="mood-message" aria-live="polite"></p>
     `;


    const saveButton = containerElement.querySelector('#saveMoodEntry');
    const moodSelectors = containerElement.querySelectorAll('.mood-selector');
    if (!saveButton || moodSelectors.length === 0) { console.error("Mood LOG ERROR: √âl√©ments UI internes introuvables."); return; }

    // Listeners s√©lecteurs (inchang√©s, utilisent currentSelection)
     moodSelectors.forEach(selector => { selector.addEventListener('click', (event) => { /* ... */ }); });
    // console.log("Mood LOG: Listeners s√©lecteurs ajout√©s.");

    // Listener bouton Sauvegarder
    saveButton.addEventListener('click', async () => {
        // R√©cup√©rer la date actuelle AU MOMENT du clic pour √™tre s√ªr
        const currentDateOnClick = getCurrentDateString();
        // console.log("Mood LOG: Clic 'Enregistrer Humeur'");
        await saveMood(containerElement, currentDateOnClick); // *** Passer la date ici ***
        // console.log("Mood LOG: Retour saveMood depuis listener.");
    });
    // console.log("Mood LOG: Listener bouton 'Enregistrer' ajout√©.");

    // Charger l'√©tat initial (maintenant que la date est d√©finie et pass√©e)
    // console.log("Mood LOG: Appel initial loadAndCheckMoodForToday...");
    await loadAndCheckMoodForToday(containerElement, todayStringForInit); // *** Passer la date ici ***
    // console.log("Mood LOG: Initialisation termin√©e.");
}
