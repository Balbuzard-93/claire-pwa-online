// plannerView.js
import { getPlannerForDate, savePlannerForDate, getCurrentDateString } from './storageUtils.js';

let currentPlannerData = { tasks: [] }; // Garde en m√©moire les donn√©es du jour
let selectedEnergy = null; // Garde l'√©nergie s√©lectionn√©e pour l'ajout
let todayString = ''; // Stocke la date du jour pour √©viter de la recalculer

/**
 * Met √† jour l'√©tat de compl√©tion d'une t√¢che et sauvegarde.
 * @param {number} taskId - L'ID unique de la t√¢che.
 * @param {boolean} isCompleted - Le nouvel √©tat.
 * @param {string} dateStr - La date du jour (YYYY-MM-DD).
 */
function updateTaskCompletedStatus(taskId, isCompleted, dateStr) {
    // Assurer que currentPlannerData et tasks existent
    if (!currentPlannerData || !Array.isArray(currentPlannerData.tasks)) {
        console.error("Donn√©es du planificateur non initialis√©es correctement.");
        return;
    }
    const taskIndex = currentPlannerData.tasks.findIndex(task => task.id === taskId);
    if (taskIndex === -1) {
        console.error(`T√¢che avec ID ${taskId} non trouv√©e pour mise √† jour.`);
        return;
    }

    currentPlannerData.tasks[taskIndex].completed = isCompleted;

    // Mettre √† jour l'UI pour cet √©l√©ment sp√©cifique
    const taskElement = document.querySelector(`#plannerTaskList .planner-task-item[data-task-id="${taskId}"]`);
    if (taskElement) {
        taskElement.classList.toggle('task-completed', isCompleted);
        // Assurer synchro de la case √† cocher (si l'event n'a pas suffi)
        const checkbox = taskElement.querySelector('.task-checkbox');
        if(checkbox) checkbox.checked = isCompleted;
    }

    savePlannerForDate(dateStr, currentPlannerData);
}

/**
 * Supprime une t√¢che de la liste et sauvegarde.
 * @param {number} taskId - L'ID unique de la t√¢che √† supprimer.
 * @param {string} dateStr - La date du jour (YYYY-MM-DD).
 */
function deleteTask(taskId, dateStr) {
    if (!currentPlannerData || !Array.isArray(currentPlannerData.tasks)) return;

    currentPlannerData.tasks = currentPlannerData.tasks.filter(task => task.id !== taskId);

    // Mettre √† jour l'UI en supprimant l'√©l√©ment
    const taskElement = document.querySelector(`#plannerTaskList .planner-task-item[data-task-id="${taskId}"]`);
    if (taskElement) {
        taskElement.remove();
    }

    savePlannerForDate(dateStr, currentPlannerData);

    // V√©rifier si la liste est vide et afficher message si besoin
    const taskListUl = document.getElementById('plannerTaskList');
    if (taskListUl && currentPlannerData.tasks.length === 0) {
         taskListUl.innerHTML = '<p class="no-tasks-message">Aucune t√¢che planifi√©e pour aujourd\'hui.</p>';
    }
}

/**
 * Ajoute une nouvelle t√¢che √† la liste et sauvegarde.
 * @param {string} dateStr - La date du jour (YYYY-MM-DD).
 */
function addTask(dateStr) {
    const inputElement = document.getElementById('newTaskInput');
    if(!inputElement) return;
    const text = inputElement.value.trim();

    if (!text) {
        alert("Veuillez entrer le texte de la t√¢che.");
        return;
    }

    const newTask = {
        id: Date.now(), // Utilisation simple de timestamp comme ID unique
        text: text,
        energy: selectedEnergy, // Utilise la variable globale 'selectedEnergy'
        completed: false
    };

    // S'assurer que currentPlannerData.tasks est un tableau
    if (!Array.isArray(currentPlannerData.tasks)) {
         currentPlannerData.tasks = [];
    }
    currentPlannerData.tasks.push(newTask);

    if (savePlannerForDate(dateStr, currentPlannerData)) {
        // Nettoyer le formulaire et re-rendre la liste
        inputElement.value = '';
        selectedEnergy = null; // R√©initialiser l'√©nergie s√©lectionn√©e
        document.querySelectorAll('.energy-selector button.selected').forEach(btn => btn.classList.remove('selected'));
        const addBtn = document.getElementById('addTaskBtn');
        if(addBtn) addBtn.disabled = true; // D√©sactiver jusqu'√† nouvelle saisie

        const taskListUl = document.getElementById('plannerTaskList');
        if (taskListUl) {
             // Enlever le message "aucune t√¢che" s'il existe
             const noTaskMsg = taskListUl.querySelector('.no-tasks-message');
             if(noTaskMsg) noTaskMsg.remove();
             // Ajouter la nouvelle t√¢che
             appendTaskToList(taskListUl, newTask, dateStr); // Ajoute juste le nouvel √©l√©ment
        } else {
             // Fallback : re-rend toute la vue si la liste n'est pas trouv√©e
             renderPlannerView(document.getElementById('plannerView'));
        }
    }
    // L'erreur est g√©r√©e dans savePlannerForDate (alerte affich√©e)
}

/**
 * Ajoute un √©l√©ment LI repr√©sentant une t√¢che √† la liste UL.
 * @param {HTMLElement} listUl - L'√©l√©ment UL o√π ajouter la t√¢che.
 * @param {object} task - L'objet t√¢che.
 * @param {string} dateStr - La date du jour.
 */
function appendTaskToList(listUl, task, dateStr) {
    const li = document.createElement('li');
    li.className = `planner-task-item ${task.completed ? 'task-completed' : ''}`;
    li.dataset.taskId = task.id;

    let energyIndicator = '';
    const energyMap = { 1: '‚ö°', 2: '‚ö°‚ö°', 3: '‚ö°‚ö°‚ö°' };
    const energyTextMap = { 1: 'Basse √©nergie', 2: '√ânergie moyenne', 3: 'Haute √©nergie' };
    // V√©rifier que task.energy est une cl√© valide dans energyMap
    if (task.energy !== null && energyMap[task.energy]) {
        energyIndicator = `<span class="energy-indicator ${task.energy === 1 ? 'low' : task.energy === 2 ? 'medium' : 'high'}" title="${energyTextMap[task.energy]}">${energyMap[task.energy]}</span>`;
    }

    // Utiliser textContent pour la s√©curit√© sur le texte de la t√¢che
    const taskTextSpan = document.createElement('span');
    taskTextSpan.className = 'task-text';
    taskTextSpan.textContent = task.text || ''; // Assurer que c'est une cha√Æne

    li.innerHTML = `
        <input type="checkbox" id="planner-task-${task.id}" class="task-checkbox" ${task.completed ? 'checked' : ''}>
        <label for="planner-task-${task.id}" class="visually-hidden">Marquer "${task.text || 't√¢che sans nom'}" comme compl√©t√©e</label>
        ${taskTextSpan.outerHTML} <!-- Ins√©rer le span s√©curis√© -->
        ${energyIndicator}
        <button class="delete-task-btn button-delete" title="Supprimer la t√¢che" aria-label="Supprimer la t√¢che: ${task.text || 't√¢che sans nom'}">üóëÔ∏è</button>
    `; // aria-label pour bouton supprimer

    // Ajouter les √©couteurs pour la nouvelle t√¢che
    const checkbox = li.querySelector('.task-checkbox');
    const deleteBtn = li.querySelector('.delete-task-btn');

    if (checkbox) { checkbox.addEventListener('change', (event) => updateTaskCompletedStatus(task.id, event.target.checked, dateStr)); }
    if (deleteBtn) { deleteBtn.addEventListener('click', () => { if(confirm(`Supprimer la t√¢che "${task.text || ''}" ?`)) { deleteTask(task.id, dateStr); } }); }

    listUl.appendChild(li);
}


/**
 * Fonction principale de rendu pour la vue Planificateur.
 * @param {HTMLElement} containerElement - Le conteneur principal de la vue.
 */
function renderPlannerView(containerElement) {
    todayString = getCurrentDateString();
    const loadedData = getPlannerForDate(todayString);
    currentPlannerData = loadedData ? loadedData : { tasks: [] };
    // S'assurer que tasks est un tableau
    if (!Array.isArray(currentPlannerData.tasks)) {
        currentPlannerData.tasks = [];
    }

    // Formater la date pour l'affichage
    let formattedDate = 'Date inconnue';
    try {
         // Ajouter T00:00:00 pour forcer l'interpr√©tation en UTC pour toLocaleDateString
         formattedDate = new Date(todayString + 'T00:00:00Z').toLocaleDateString('fr-FR', { day: 'numeric', month: 'long', year: 'numeric' });
    } catch(e) {
        console.error("Erreur formatage date planner:", e);
    }


    containerElement.innerHTML = `
        <h3>Mon Plan Doux du ${formattedDate}</h3>
        <div class="planner-add-task">
             <label for="newTaskInput" class="visually-hidden">Nouvelle t√¢che ou intention :</label>
            <input type="text" id="newTaskInput" placeholder="Nouvelle intention ou t√¢che..." maxlength="150"> <!-- Limiter longueur -->
            <div class="energy-selector" role="group" aria-labelledby="energy-label-planner">
                 <span id="energy-label-planner" class="visually-hidden">Niveau d'√©nergie estim√© :</span>
                 √ânergie :
                <button data-energy="1" title="Basse √©nergie" aria-label="Basse √©nergie">‚ö°</button>
                <button data-energy="2" title="√ânergie moyenne" aria-label="√ânergie moyenne">‚ö°‚ö°</button>
                <button data-energy="3" title="Haute √©nergie" aria-label="Haute √©nergie">‚ö°‚ö°‚ö°</button>
                <button data-energy="null" title="Non d√©fini / Effacer" aria-label="√ânergie non d√©finie">‚ùì</button>
            </div>
            <button id="addTaskBtn" class="button-primary" disabled>Ajouter</button>
        </div>
        <ul id="plannerTaskList"></ul> <!-- Liste initialement vide -->
    `;

    // Populer la liste des t√¢ches existantes
    const taskListUl = containerElement.querySelector('#plannerTaskList');
    if (taskListUl && currentPlannerData.tasks.length > 0) {
        currentPlannerData.tasks.forEach(task => appendTaskToList(taskListUl, task, todayString));
    } else if (taskListUl) {
        taskListUl.innerHTML = '<p class="no-tasks-message">Aucune t√¢che planifi√©e pour aujourd\'hui.</p>';
    }


    // Ajouter les √©couteurs pour le formulaire d'ajout
    const newTaskInput = containerElement.querySelector('#newTaskInput');
    const addTaskBtn = containerElement.querySelector('#addTaskBtn');
    const energyButtons = containerElement.querySelectorAll('.energy-selector button');

    // Activer le bouton Ajouter seulement si du texte est saisi
    if (newTaskInput && addTaskBtn) {
        newTaskInput.addEventListener('input', () => {
            addTaskBtn.disabled = newTaskInput.value.trim() === '';
        });
        // Permettre ajout avec touche Entr√©e
        newTaskInput.addEventListener('keydown', (event) => {
             if(event.key === 'Enter' && !addTaskBtn.disabled) {
                  addTask(todayString);
             }
        });
    }

    // G√©rer la s√©lection d'√©nergie
    energyButtons.forEach(button => {
        button.addEventListener('click', () => {
            const currentSelected = containerElement.querySelector('.energy-selector button.selected');
            if (currentSelected === button && button.dataset.energy !== 'null') { // Permet de d√©s√©lectionner en recliquant
                 button.classList.remove('selected');
                 selectedEnergy = null;
            } else if (currentSelected === button && button.dataset.energy === 'null') {
                 // Ne rien faire si on clique sur '?' d√©j√† s√©lectionn√©
            }
             else {
                if(currentSelected) currentSelected.classList.remove('selected');
                button.classList.add('selected');
                const energyValue = button.dataset.energy;
                selectedEnergy = (energyValue === 'null') ? null : parseInt(energyValue, 10);
            }
           // console.log("√ânergie s√©lectionn√©e:", selectedEnergy);
        });
    });

    // Ajouter l'√©couteur au bouton Ajouter
    if (addTaskBtn) { addTaskBtn.addEventListener('click', () => addTask(todayString)); }
}

/** Fonction de rafra√Æchissement export√©e. */
export function refreshPlannerView() {
    const c = document.getElementById('plannerView');
    if (c) {
        const currentWrapper = c.querySelector('#planner-content-wrapper'); // Trouver le wrapper s'il existe
        renderPlannerView(currentWrapper || c); // Rendre dans le wrapper ou le conteneur principal
    }
}
/** Initialise la vue Planificateur. */
export function initPlannerView(containerElement) {
    if (!containerElement) { console.error("Conteneur vue Planificateur introuvable."); return; }
    // Ajouter un titre H2 global pour la section et un wrapper pour le contenu dynamique
    containerElement.innerHTML = `<h2>Plan du Jour</h2><div id="planner-content-wrapper"></div>`;
    const contentWrapper = containerElement.querySelector('#planner-content-wrapper');
    if (contentWrapper) {
        renderPlannerView(contentWrapper); // Premier rendu dans le wrapper
    } else {
         renderPlannerView(containerElement); // Fallback
    }
}