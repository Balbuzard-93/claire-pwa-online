// exercisesView.js (Avec Exercices TCD Interactifs)

// --- Donn√©es des Exercices ---
const exercisesData = [
    {
        id: 'relaxation_rapide',
        title: "Relaxation Rapide (5 min)",
        type: 'text', // Indiquer le type
        description: "Un scan corporel simple pour d√©tendre rapidement le corps et l'esprit.",
        steps: [
            "Installez-vous confortablement, assis ou allong√©. Fermez doucement les yeux si vous le souhaitez.",
            "Prenez 2-3 respirations profondes. Inspirez par le nez en gonflant le ventre, expirez lentement par la bouche.",
            "Portez votre attention sur vos pieds. Remarquez toute tension et essayez de la rel√¢cher √† l'expiration.",
            "Remontez lentement votre attention le long de vos jambes, en rel√¢chant les tensions dans les mollets, les genoux, les cuisses.",
            "Portez attention √† votre bassin et votre ventre. Laissez cette zone se d√©tendre.",
            "Remarquez votre dos, vos √©paules. Laissez les √©paules s'abaisser, loin des oreilles.",
            "D√©tendez vos bras, vos mains, jusqu'au bout des doigts.",
            "Rel√¢chez les muscles de votre cou, de votre m√¢choire. D√©serrez les dents.",
            "D√©tendez les petits muscles autour de vos yeux, votre front.",
            "Prenez encore une ou deux respirations profondes, en sentant une vague de d√©tente parcourir votre corps √† chaque expiration.",
            "Quand vous √™tes pr√™t(e), bougez doucement les doigts et les orteils, √©tirez-vous si besoin, et ouvrez les yeux."
        ]
    },
    {
        id: 'auto_compassion_breve',
        title: "Pause d'Auto-Compassion (2 min)",
        type: 'text',
        description: "Un exercice court pour se soutenir dans les moments difficiles.",
        steps: [
            "Prenez un moment pour reconna√Ætre que vous vivez un moment difficile. Dites-vous mentalement : 'C'est un moment de souffrance' ou 'C'est difficile en ce moment'.",
            "Rappelez-vous que la souffrance fait partie de la vie et de l'exp√©rience humaine partag√©e. Dites-vous : 'La souffrance fait partie de la vie' ou 'D'autres personnes ressentent cela aussi'.",
            "Posez une main sur votre c≈ìur (ou un autre endroit apaisant). Sentez la chaleur et le contact doux.",
            "Offrez-vous des mots de gentillesse et de soutien. Dites-vous : 'Que je puisse √™tre bienveillant(e) avec moi-m√™me', 'Que je puisse m'accepter tel(le) que je suis dans ce moment', ou 'Que je puisse me donner la compassion dont j'ai besoin'." ,
            "Restez avec ces sensations quelques instants, puis reprenez votre journ√©e."
        ]
    },
     {
        id: 'respiration_carree_texte',
        title: "Respiration Carr√©e (4x4 Texte)",
        type: 'text',
        description: "Version textuelle de la technique pour calmer et concentrer.",
        steps: [
            "Asseyez-vous confortablement, le dos droit mais d√©tendu.", "Expirez compl√®tement par la bouche.",
            "Inspirez lentement par le nez en comptant jusqu'√† 4.", "Retenez votre souffle, poumons pleins, en comptant jusqu'√† 4.",
            "Expirez lentement et compl√®tement par la bouche en comptant jusqu'√† 4.", "Retenez votre souffle, poumons vides, en comptant jusqu'√† 4.",
            "Ceci est un cycle. R√©p√©tez pendant 1 √† 5 minutes.", "Concentrez-vous sur le comptage et la sensation de l'air.",
            "Terminez et observez comment vous vous sentez."
        ]
    },
    {
        id: 'interactive_breathing_box',
        title: "üßò Respiration Rythm√©e (Carr√©e Guid√©e)",
        type: 'interactive_breathing',
        description: "Un guide visuel et un d√©compte pour la respiration carr√©e (4-4-4-4).",
        config: { inhale: 4, hold1: 4, exhale: 4, hold2: 4, loops: 5 }
    },
    {
        id: 'interactive_54321',
        title: "‚öì Ancrage Sensoriel 5-4-3-2-1 (Guid√©)",
        type: 'interactive_54321',
        description: "Reconnectez-vous au pr√©sent en observant vos sens, √©tape par √©tape.",
        stepsPrompt: [
            { count: 5, sense: "CHOSES √† VOIR", instruction: "Regardez autour et nommez cinq choses distinctes.", placeholder: "Ex: plante, livre, ombre..." },
            { count: 4, sense: "CHOSES √† TOUCHER", instruction: "Identifiez quatre sensations tactiles.", placeholder: "Ex: texture v√™tement, chaise..." },
            { count: 3, sense: "SONS √† ENTENDRE", instruction: "√âcoutez et nommez trois sons distincts.", placeholder: "Ex: silence, oiseau, respiration..." },
            { count: 2, sense: "ODEURS √† SENTIR", instruction: "Identifiez deux odeurs, m√™me subtiles.", placeholder: "Ex: air frais, parfum..." },
            { count: 1, sense: "CHOSE √† GO√õTER (ou 1 qualit√© positive)", instruction: "Portez attention √† votre bouche ou nommez une chose positive sur vous.", placeholder: "Ex: go√ªt dentifrice, ou 'Je suis fort(e)'..." }
        ]
    }
];

let interactiveTimerId = null;
let interactivePhase = '';
let interactivePhaseTimer = 0;
let interactiveLoops = 0;
let five4321StepIndex = 0;

function stopCurrentInteractiveExercise() {
    if (interactiveTimerId) { clearInterval(interactiveTimerId); interactiveTimerId = null; }
    const visualizer = document.getElementById('interactiveBreathingVisualizer');
    if (visualizer) { visualizer.className = 'interactive-breathing-visualizer'; visualizer.style.animationName = 'none'; }
    interactivePhase = ''; interactivePhaseTimer = 0; interactiveLoops = 0;
}

function renderInteractiveBreathing(exerciseData, detailContainer) {
    stopCurrentInteractiveExercise();
    const config = exerciseData.config;
    // Le HTML est ajout√© au detailContainer qui contient d√©j√† le bouton retour
    detailContainer.innerHTML += `
        <div class="interactive-exercise-content">
            <h4>${exerciseData.title}</h4>
            <div id="interactiveBreathingVisualizer" class="interactive-breathing-visualizer">
                <span id="interactiveBreathingCounter" class="interactive-breathing-counter">${config.inhale}</span>
            </div>
            <p id="interactiveBreathingInstruction" aria-live="assertive">Pr√©parez-vous...</p>
            <button id="startStopInteractiveBreathBtn" class="button-primary">D√©marrer</button>
        </div>
    `;
    const visualizer = detailContainer.querySelector('#interactiveBreathingVisualizer');
    const counterEl = detailContainer.querySelector('#interactiveBreathingCounter');
    const instructionEl = detailContainer.querySelector('#interactiveBreathingInstruction');
    const startStopBtn = detailContainer.querySelector('#startStopInteractiveBreathBtn');

    function updateCycle() {
        if(!visualizer || !counterEl || !instructionEl) { stopCurrentInteractiveExercise(); return; } // S√©curit√©
        if (interactivePhaseTimer > 0) {
            counterEl.textContent = interactivePhaseTimer; interactivePhaseTimer--;
        } else {
            switch (interactivePhase) {
                case 'starting': case 'hold2':
                    interactivePhase = 'inhale'; interactivePhaseTimer = config.inhale; instructionEl.textContent = 'Inspirez...';
                    visualizer.className = 'interactive-breathing-visualizer ib-inhale'; visualizer.style.animationDuration = `${config.inhale}s`; break;
                case 'inhale':
                    interactivePhase = 'hold1'; interactivePhaseTimer = config.hold1; instructionEl.textContent = 'Retenez...';
                    visualizer.className = 'interactive-breathing-visualizer ib-hold'; visualizer.style.animationDuration = `${config.hold1}s`; break;
                case 'hold1':
                    interactivePhase = 'exhale'; interactivePhaseTimer = config.exhale; instructionEl.textContent = 'Expirez...';
                    visualizer.className = 'interactive-breathing-visualizer ib-exhale'; visualizer.style.animationDuration = `${config.exhale}s`; break;
                case 'exhale':
                    interactiveLoops++;
                    if (interactiveLoops >= config.loops) { stopCurrentInteractiveExercise(); instructionEl.textContent = "Termin√© !"; startStopBtn.textContent="Recommencer"; return; }
                    interactivePhase = 'hold2'; interactivePhaseTimer = config.hold2; instructionEl.textContent = 'Retenez (poumons vides)...';
                    visualizer.className = 'interactive-breathing-visualizer ib-hold'; visualizer.style.animationDuration = `${config.hold2}s`; break;
            }
            counterEl.textContent = interactivePhaseTimer; interactivePhaseTimer--;
        }
    }
    startStopBtn.addEventListener('click', () => {
        if (interactiveTimerId) { stopCurrentInteractiveExercise(); instructionEl.textContent = `Exercice arr√™t√©.`; counterEl.textContent = ''; startStopBtn.textContent = 'D√©marrer'; }
        else { interactiveLoops = 0; interactivePhase = 'starting'; interactivePhaseTimer = 1; instructionEl.textContent = 'Pr√©parez-vous...'; counterEl.textContent = ''; startStopBtn.textContent = 'Arr√™ter'; setTimeout(() => { interactivePhaseTimer = 0; updateCycle(); interactiveTimerId = setInterval(updateCycle, 1000); }, 500); }
    });
     instructionEl.textContent = `Cliquez pour ${config.loops} cycles (Insp ${config.inhale}s - Ret ${config.hold1}s - Exp ${config.exhale}s - Ret ${config.hold2}s).`;
     if(counterEl) counterEl.textContent = config.inhale; // Affichage initial
}

function renderInteractive54321(exerciseData, detailContainer) {
    stopCurrentInteractiveExercise();
    five4321StepIndex = 0;
    const contentWrapper = document.createElement('div'); // Wrapper pour le contenu 54321
    contentWrapper.className = 'interactive-exercise-content';
    detailContainer.appendChild(contentWrapper);

    function displayStep(index) {
        const step = exerciseData.stepsPrompt[index];
        contentWrapper.innerHTML = `
            <h4>${exerciseData.title} - √âtape ${index + 1}/${exerciseData.stepsPrompt.length}</h4>
            <div class="interactive-54321-step">
                <p class="sense-prompt"><strong>${step.count} ${step.sense}</strong></p>
                <p class="sense-instruction">${step.instruction}</p>
                <label for="user-input-54321-${index}" class="visually-hidden">Observations pour ${step.sense}</label>
                <textarea id="user-input-54321-${index}" rows="3" placeholder="${step.placeholder || 'Vos observations (optionnel)...'}"></textarea>
            </div>
            <div class="interactive-54321-controls">
                ${index > 0 ? '<button id="prev54321Btn" class="button-secondary">Pr√©c√©dent</button>' : ''}
                ${index < exerciseData.stepsPrompt.length - 1 ? '<button id="next54321Btn" class="button-primary">Suivant</button>' : '<button id="finish54321Btn" class="button-primary">Terminer</button>'}
            </div>`;
        const nextBtn = contentWrapper.querySelector('#next54321Btn');
        const prevBtn = contentWrapper.querySelector('#prev54321Btn');
        const finishBtn = contentWrapper.querySelector('#finish54321Btn');
        if (nextBtn) { nextBtn.addEventListener('click', () => { five4321StepIndex++; displayStep(five4321StepIndex); }); }
        if (prevBtn) { prevBtn.addEventListener('click', () => { five4321StepIndex--; displayStep(five4321StepIndex); }); }
        if (finishBtn) { finishBtn.addEventListener('click', () => { contentWrapper.innerHTML = `<h4>${exerciseData.title}</h4><p>Bravo ! Exercice d'ancrage termin√©. Observez comment vous vous sentez.</p>`; /* Pas de bouton retour ici, le bouton global de la vue est utilis√© */ }); }
         // Mettre le focus sur le textarea
         const currentTextarea = contentWrapper.querySelector(`#user-input-54321-${index}`);
         if(currentTextarea) currentTextarea.focus();
    }
    displayStep(five4321StepIndex);
}

function attachBackToListListener(detailContainer) {
    const backBtn = detailContainer.querySelector('#backToListBtnExercises');
    const listContainer = document.getElementById('exerciseListContainer');
    if (backBtn && listContainer) {
        backBtn.addEventListener('click', () => {
            stopCurrentInteractiveExercise();
            detailContainer.style.display = 'none';
            detailContainer.innerHTML = ''; // Vider
            listContainer.style.display = 'block';
        }, { once: true });
    }
}

function showExerciseDetail(exerciseId) {
    stopCurrentInteractiveExercise();
    const exercise = exercisesData.find(ex => ex.id === exerciseId);
    if (!exercise) return;
    const listContainer = document.getElementById('exerciseListContainer');
    const detailContainer = document.getElementById('exerciseDetail');
    if (!listContainer || !detailContainer) return;
    detailContainer.innerHTML = `<button id="backToListBtnExercises" class="back-button button-secondary">‚Üê Retour aux exercices</button>`; // Bouton retour d'abord
    attachBackToListListener(detailContainer); // Attacher son listener
    const contentTarget = document.createElement('div'); // Wrapper pour contenu sp√©cifique
    detailContainer.appendChild(contentTarget);

    if (exercise.type === 'interactive_breathing') { renderInteractiveBreathing(exercise, contentTarget); }
    else if (exercise.type === 'interactive_54321') { renderInteractive54321(exercise, contentTarget); }
    else { // Type 'text'
        let stepsHtml = '<ol class="steps-list">'; (exercise.steps || []).forEach((step, index) => { stepsHtml += `<li class="step-${index + 1}"><strong>√âtape ${index + 1}:</strong> ${step}</li>`; }); stepsHtml += '</ol>';
        contentTarget.innerHTML = `<h3>${exercise.title}</h3><div class="exercise-steps">${stepsHtml}</div>`;
    }
    listContainer.style.display = 'none';
    detailContainer.style.display = 'block';
}

function displayExerciseList(listElement) {
    listElement.innerHTML = '';
    if (exercisesData.length === 0) { listElement.innerHTML = '<p>Aucun exercice.</p>'; return; }
    exercisesData.forEach(exercise => {
        const li = document.createElement('li'); li.className = 'exercise-list-item'; li.dataset.exerciseId = exercise.id;
        li.setAttribute('role', 'button'); li.setAttribute('tabindex', '0');
        const titleH4 = document.createElement('h4'); titleH4.textContent = exercise.title;
        const descP = document.createElement('p'); descP.textContent = exercise.description;
        li.appendChild(titleH4); li.appendChild(descP);
        li.addEventListener('click', () => showExerciseDetail(exercise.id));
        li.addEventListener('keydown', (e) => { if (e.key === 'Enter' || e.key === ' ') { e.preventDefault(); showExerciseDetail(exercise.id); } });
        listElement.appendChild(li);
    });
}

export function initExercisesView(containerElement) {
    if (!containerElement) { console.error("Conteneur vue Exercices introuvable."); return; }
    containerElement.innerHTML = `
        <h2>Exercices Guid√©s</h2>
        <div id="exerciseListContainer">
             <p class="exercises-intro">Choisissez un exercice pour commencer.</p>
             <ul id="exerciseList"></ul>
        </div>
        <div id="exerciseDetail" style="display: none;"></div>`;
    const listUl = containerElement.querySelector('#exerciseList');
    if (listUl) { displayExerciseList(listUl); }
    else { console.error("#exerciseList introuvable."); }
}
